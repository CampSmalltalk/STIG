<?xml version="1.0"?><st-source><!-- Name: STIG-ToolsDevelopmentPrerequisites: #(#(#any 'STIG' ''))PackageName: STIG-ToolsParcel: #('STIG-Tools')ParcelDirectory: STIG-ToolsParcelName: STIG-ToolsPrerequisiteDescriptions: #(#(#name 'STIG' #componentType #package))PrerequisiteParcels: #(#('STIG' ''))Version: stic 2Date: 12:41:54 PM March 30, 2012 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.9 (mar12.4) of March 23, 2012 on March 30, 2012 at 12:41:54 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>Git</name><environment>STIG</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>globalArgs </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>STIG-Tools</package></attributes></class><shared-variable><name>LogTimes</name><environment>STIG.Git</environment><private>false</private><constant>false</constant><category>debugging</category><initializer>true</initializer><attributes><package>STIG-Tools</package></attributes></shared-variable><shared-variable><name>LogOutput</name><environment>STIG.Git</environment><private>false</private><constant>false</constant><category>debugging</category><initializer>true</initializer><attributes><package>STIG-Tools</package></attributes></shared-variable><methods><class-id>STIG.Git</class-id> <category>commands</category><body package="STIG-Tools">addAll	self run: #('add' '-A')</body><body package="STIG-Tools">commitAll: aMessage	self		run: (#('commit' '-a' '--allow-empty-message' '-m') copyWith: aMessage)</body><body package="STIG-Tools">init	self run: #('init')</body></methods><methods><class-id>STIG.Git</class-id> <category>private</category><body package="STIG-Tools">packageName	^globalArgs last allButFirst: ('--work-tree=' , DefaultRoot) size + 1</body><body package="STIG-Tools">run: anArgumentArray	| time result process exitCode |	LogTimes		ifTrue: 			[Transcript				cr;				show: anArgumentArray first , ': ' , self packageName , '...'].	process := ExternalProcess defaultClass new.	time := 			[result := process fork: 'git' arguments: globalArgs , anArgumentArray]					timeToRun.	LogTimes		ifTrue: 			[Transcript				print: time;				endEntry].	LogOutput		ifTrue: 			[result trimSeparators isEmpty				ifFalse: 					[Transcript						cr;						show: result trimSeparators]].	(exitCode := process exitStatus) isZero		ifFalse: [self error: exitCode printString , ' - Git error: ' , result]</body></methods><methods><class-id>STIG.Git</class-id> <category>initialize-release</category><body package="STIG-Tools">setPackage: aPackage	globalArgs := Array with: '--git-dir='						, (aPackage stigRoot asFilename / aPackage name / '.git') asString				with: '--work-tree=' , (aPackage stigRoot asFilename / aPackage name) asString</body></methods><methods><class-id>STIG.Git class</class-id> <category>instance creation</category><body package="STIG-Tools">for: aPackage	^self new setPackage: aPackage</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>STIG</category><body package="STIG-Tools">stigCommitPackages	| message |	message := Dialog				request: 'Commit Message:'				initialAnswer: 'commit message'				onCancel: [^self].	message := message trimSeparators.	self packages do: 			[:eachPackage |			eachPackage stigToDisk.			(STIG.Git for: eachPackage) addAll.			(STIG.Git for: eachPackage) commitAll: message]</body><body package="STIG-Tools">stigInitPackages	self packages do: 			[:eachPackage |			eachPackage stigToDisk.			(STIG.Git for: eachPackage) init]</body><body package="STIG-Tools">stigReconcileDisk: diskBlueprints toImage: imageBlueprints	| diffs diskStack imageStack toRemove toUpdate againDisk againImage |	diskBlueprints sort.	imageBlueprints sort.	diffs := (SequenceableCollectionDifferences new)				comparisonFunction: [:a :b | a refersToSameObject: b];				differencesFrom: diskBlueprints to: imageBlueprints.	diskStack := OrderedCollection withAll: diskBlueprints.	imageStack := OrderedCollection withAll: imageBlueprints.	toRemove := OrderedCollection new.	toUpdate := OrderedCollection new.	againDisk := OrderedCollection new.	againImage := OrderedCollection new.	diffs do: 			[:eachSubsequence |			eachSubsequence isDelete				ifTrue: [toRemove addAll: (diskStack removeFirst: eachSubsequence length)]				ifFalse: 					[eachSubsequence isInsert						ifTrue: [toUpdate addAll: (imageStack removeFirst: eachSubsequence length)]						ifFalse: 							[againImage addAll: (imageStack removeFirst: eachSubsequence length).							againDisk addAll: (diskStack removeFirst: eachSubsequence length)]]].	diffs := againDisk differences: againImage.	(diffs select: #isInsert)		do: [:eachSubsequence | toUpdate addAll: eachSubsequence].	toRemove do: [:each | each original delete].	^toUpdate</body><body package="STIG-Tools">stigUpdatePackage: aPackage</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>menus</category><body package="STIG-Tools">stigCommitMenuItem	&lt;itemInMenu: #(#pundleMenu #stigMenu) position: 10.1&gt;	^(MenuItem labeled: 'Commit') value: [self stigCommitPackages]</body><body package="STIG-Tools">stigDiffMenuItem	&lt;itemInMenu: #(#pundleMenu #stigMenu) position: 10.6&gt;	^(MenuItem labeled: 'Diff')		value: [ self packages halt ]</body><body package="STIG-Tools">stigInitMenuItem	&lt;itemInMenu: #(#pundleMenu #stigMenu) position: 90.1&gt;	^(MenuItem labeled: 'Init') value: [self stigInitPackages]</body><body package="STIG-Tools">stigReadMenuItem	&lt;itemInMenu: #(#pundleMenu #stigMenu) position: 10.1&gt;	^(MenuItem labeled: 'Read')		value: [self packages do: [:eachPackage | eachPackage stigFromDisk]]</body><body package="STIG-Tools">stigSetRootMenuItem	&lt;itemInMenu: #(#pundleMenu #stigMenu) position: 90.5&gt;	^(MenuItem labeled: 'Set Root')		value: [			(Dialog request: 'Root directory for this project?' initialAnswer: STIG.DefaultRoot)				ifNotNil: [ :root | self packages do: [ :package | package propertyAt: #STIGRoot put: root ] ] ]</body><body package="STIG-Tools">stigSubmenuItem	&lt;itemInMenu: #(#pundleMenu) position: 15.0&gt;	^(MenuItem labeled: 'STIG')		nameKey: #stigMenu;		submenu: Menu new;		yourself</body><body package="STIG-Tools">stigWriteMenuItem	&lt;itemInMenu: #(#pundleMenu #stigMenu) position: 10.1&gt;	^(MenuItem labeled: 'Write') value: [self packages do: #stigToDisk]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>BrowserNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractBrowserNavigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BrowserUI</package></attributes></class></st-source>